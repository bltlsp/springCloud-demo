server:
  port: 8092
  undertow:
    buffer-size: 1024
    direct-buffers: true

logging:
  level.root: info
  #On Windows: java.io.tmpdir:[C:\DOCUME~1\JasonL\LOCALS~1\Temp\] C:\Users\XXXX\AppData\Local\Temp\
  #On Solaris: java.io.tmpdir:[/var/tmp/]
  #On Linux: java.io.tmpdir: [/tmp]
  #On Mac OS X: java.io.tmpdir: [/tmp]
  file: ${java.io.tmpdir}/logs/code-generator/code-generator.log          # 在/var/logs目录下生成spring.log文件

spring:
  profiles.active: dev
  application.name: code-generator
  # 主数据源，默认的 http://localhost:port/push/druid/index.html
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    #useAffectedRows返回insert update delete影响行数
    url: jdbc:mysql://localhost:3306/order?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
    username: root
    password: zaq1ZAQ1
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #useGlobalDataSourceStat: true

mybatis:
  type-aliases-package: com.yhb.generator.model
  #设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型
  configuration:
    jdbcTypeForNull: NULL
    use-generated-keys: true
    #支持驼峰模式
    map-underscore-to-camel-case: true
  mapper-locations: classpath:mapper/*.xml

pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSqlehelper

#swagger配置
swagger:
  title: Api Document
  description: '@project.description@'
  version: '@project.version@'
  contact.name: yhb
  contact.email: 1120564240@qq.com
  base-package: com.yhb.generator
  base-path: /**
  exclude-path: /error

generator:
  toZip: false
  #包前缀
  packageName: com
  #模块名，生成的类的package为：com.kmhealthcloud.generator
  moduleName:
  #扩展业务名，生成的类的package为：com.kmhealthcloud.generator.biz
  extendName:
  #作者名
  author: JasonLiu
  #表前缀，如表tb_sys_user 生成类 sys_user
  tablePrefix:
  #忽略通用字段
  ignorecolumns: id,sort,create_by,create_time,last_update_by,last_update_time,status
  template:
    - templateName: Model.java.vm
      templatePath: com.yhb.entity
    - templateName: Dao.java.vm
      templatePath: com.yhb.dao
    - templateName: Dao.xml.vm
      templatePath: com.yhb.dao.mapper
    - templateName: Service.java.vm
      templatePath: com.yhb.service
    - templateName: ServiceImpl.java.vm
      templatePath: com.yhb.service.impl
    - templateName: Controller.java.vm
      templatePath: com.yhb.controller
  dataType:
    tinyint: Integer,INTEGER
    smallint: Integer,INTEGER
    mediumint: Integer,INTEGER
    int: Integer,INTEGER
    integer: Integer,INTEGER
    bigint: Long,BIGINT
    float: Float,REAL
    double: Double,DOUBLE
    decimal: BigDecimal,DECIMAL
    bit: Boolean,INTEGER
    char: String,INTEGER
    varchar: String,VARCHAR
    tinytext: String,VARCHAR
    text: String,VARCHAR
    mediumtext: String,VARCHAR
    longtext: String,VARCHAR
    date: Date,DATE
    datetime: Date,TIMESTAMP
    timestamp: Date,TIMESTAMP

